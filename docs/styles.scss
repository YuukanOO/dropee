$types: (
  small: (0.889, 1),
  body: (1, 1),
  h6: (1.125, 1),
  h5: (1.266, 1),
  h4: (1.424, 1.5),
  h3: (1.602, 2),
  h2: (1.802, 2),
  h1: (2.027, 2)
);

$palette: (
  brand: #C0CA33,
  accent: (10%, 5%, #0277BD, 5%, 10%),
  divider: rgba(black, 0.12),
  text: (black, rgba(black, 0.87), rgba(black, 0.54)),
  text-inverse: white,
  pre: rgba(black, 0.05)
);

@import "./../src/color";
@import "./../src/typography";
@import "./../src/grid";
@import "./../src/responsive";

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html {
  font-size: 1em;
}

body {
  @include type(body);
  color: color(text);

  font-family: -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
}

p,
ul,
ol,
pre {
  margin-bottom: baseline();
}

.btn {
  border: 2px solid color(brand);
  border-radius: 100px;
  font-weight: bold;
  color: color(brand);
  padding: baseline(0.5);
  outline: none;
  text-decoration: none;
  transition: all 0.2s;

  &:focus {
    box-shadow: 0 0 10px color(brand);
  }

  &:hover {
    background-color: color(brand);
    color: color(text-inverse);
    transform: scale(1.1);
  }

  &:active {
    background-color: color(brand, -1);
    border-color: color(brand, -1);
    transform: scale(1);
  }
}

.page {
  margin: baseline(2) auto 0 auto;
  max-width: 700px;
  padding: 0 baseline(1);
  width: 100%;

  @include on(tablet) {
    padding: 0;
  }
}

hr {
  border: 1px solid color(divider);
  margin: baseline() 0;
}

code,
pre {
  font-family: SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;
}

code {
  color: color(accent);
}

pre {
  background-color: color(pre);
  color: color(text, 1);
  overflow: auto;
  padding: baseline();
}

.section {
  &__title {
    @include type(h3);
  }

  &__output + pre {
    margin-top: baseline();
  }

  &__output-title {
    @include type(small);
    border-top: 1px dashed color(divider);
    
    span {
      background-color: color(pre);
      color: color(text, 1);
      display: inline-block;
      padding: 0 baseline(0.5);
    }
  }

  a {
    color: color(accent);
    font-weight: bold;
    text-decoration: none;

    &:hover {
      color: color(accent, -1);
      text-decoration: underline;
    }
  }
}

.page-header {
  text-align: center;

  &__title {
    @include type(h1);
    font-weight: bold;

    span {
      background-color: color(brand);
      color: color(text-inverse);
      padding: 0.25rem;
    }
  }

  &__description {
    @include type(h4);
    margin: baseline() 0;
    font-weight: normal;
  }

  &__actions {
    @include row($x: center, $y: center);

    & > * {
      margin-bottom: 0;
    }

    & > * + * {
      margin-left: baseline();
    }
  }
}

.color-output {
  @include row();

  &__item {
    @include cell(1/5, $grow: 0);
    height: 50px;
  }
}

.grid-output {
  border: 1px dashed color(brand, -1);

  & + & {
    margin-top: baseline();
  }

  .grid-item {
    background-color: rgba(color(brand), 0.5);
    height: 50px;
  }

  .grid-container {
    @include row($gap: 24px);
    background-color: rgba(color(brand), 0.25);

    .grid-item {
      @include cell(1/5, $grow: 0);
    }
  }

  .grid-container-spaced {
    @include row($x: space-between);

    .grid-item {
      width: 100px;
    }
  }

  .grid-container-col {
    @include col($x: flex-end, $y: center);
    height: 200px;

    .grid-item {
      width: 100px;
    }
  }
}

.responsive-output {
  p::after {
    content: 'Default content, on phone';

    @include on(tablet) {
      content: 'On tablet';
    }

    @include on(desktop) {
      content: 'On desktop';
    }

    @include on(large-desktop) {
      content: 'On large desktop';
    }
  }
}

/**
 * Let's autogenerate some stuff
 */

@each $color in map-keys($palette) {
  .color-#{$color} {
    background-color: color($color);
  }

  $data: map-get($palette, $color);

  @if length($data) == 1 {
    @each $variant in map-keys($variants) {
      .color-#{$color}--#{$variant} {
        background-color: color($color, $variant);
      }
    }
  } @else {
    @for $i from 1 through length($data) {
      $variant: $i - (ceil(length($data) / 2));
      
      .color-#{$color}--#{$variant} {
        background-color: color($color, $variant);
      }
    }
  }
}

@each $breakpoint in map-keys($breakpoints) {
  .breakpoint-#{$breakpoint} {
    @include on($breakpoint) {
      .breakpoint__item {
        color: red;
      }
    }
  }
}

@each $type in map-keys($types) {
  .type-#{$type} {
    @include type($type);
  }
}